"use strict";(self.webpackChunkymdarake_github_io=self.webpackChunkymdarake_github_io||[]).push([[1477],{10:t=>{t.exports=JSON.parse('{"blogPosts":[{"id":"demystifying-encoding-and-length-of-string","metadata":{"permalink":"/blog/demystifying-encoding-and-length-of-string","source":"@site/blog/2023-01-21.md","title":"Demystifying Encoding and Length of String","description":"Hi\ud83d\udc4b How you doin\'?","date":"2023-01-21T00:00:00.000Z","formattedDate":"January 21, 2023","tags":[{"label":"encoding","permalink":"/blog/tags/encoding"},{"label":"unicode","permalink":"/blog/tags/unicode"},{"label":"emoji","permalink":"/blog/tags/emoji"},{"label":"surrogates","permalink":"/blog/tags/surrogates"},{"label":"zero-width-joiner","permalink":"/blog/tags/zero-width-joiner"},{"label":"variation-selector","permalink":"/blog/tags/variation-selector"},{"label":"utf-8","permalink":"/blog/tags/utf-8"},{"label":"utf-16","permalink":"/blog/tags/utf-16"},{"label":"jisx0208","permalink":"/blog/tags/jisx-0208"}],"readingTime":3.245,"hasTruncateMarker":true,"authors":[{"name":"ymdarake","title":"Maintainer","url":"https://github.com/ymdarake","imageURL":"https://github.com/ymdarake.png","key":"ymdarake"}],"frontMatter":{"slug":"demystifying-encoding-and-length-of-string","title":"Demystifying Encoding and Length of String","authors":"ymdarake","tags":["encoding","unicode","emoji","surrogates","zero-width-joiner","variation-selector","utf-8","utf-16","jisx0208"]},"nextItem":{"title":"Reading Fundamentals of Software Architecture","permalink":"/blog/reading-fundamentals-of-software-architecture"}},"content":"## Hi\ud83d\udc4b How you doin\'?\\n\\nWhen I text somebody, I write something like this at the beginning.\\n\\nDo you do this too sometimes?\\n\\nI like to use emojis as punctuation characters, pretty much.\\n\\n## WEB input validation\\n\\nSo, what if you have to check the length of a message like that?\\n\\nI know that I gotta be careful about stuff like `.length`, `input[0]` and so on,\\n\\nbut this time, I stepped in further into the internals.\\n\\n### Let\'s count string length in JavaScript\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you want to make sure users receive an error message when they input too many characters, you may write:\\n\\n```js\\nconst input = \\"some random input\\";\\nif (input.length > 30) {\\n    alert(\\"sorry, your profile must be less than 30 characters!\\");\\n}\\n```\\n\\nBut what exactly is the `input.length` counting? In the example above,\\n```js\\n> const input = \\"some random input\\"; console.log(input.length);\\n\\n17\\n```\\n\\nYeah, looks no problem. But hey, what if your user write something like:\\n```js\\n> const input = \\"Hi\ud83d\udc4b How you doin\'?\\"; console.log(input.length);\\n\\n19\\n\\n> \\"\ud83d\udc4b\\".length\\n\\n2\\n\\n// ok, I know it\'s a multibyte character, that\'s fine ofc.\\n// let\'s try another lovely sentence\\n> const input = \\"I love my girlfriend\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\\"; console.log(input.length);\\n\\n31\\n\\n// huh, this is getting wild...\\n\\n> \\"\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\\".length\\n11\\n\\n// ok, fair enough...?\\n```\\n\\nHmm, OK I know something happens with emojis, but why?\\n\\n### Internal representation of string in JavaScript\\n\\nWhen you write JavaScript code, I assume you set the encoding to `UTF-8`.\\n\\nBut JavaScript uses `UTF-16` in its internal representation of strings.\\n\\nFirst of all, when you use `UTF-16` you have to represent a character in 2 bytes, _not alaways but pretty much_.\\n\\nSo, as you know, it\'s like `A is U+0041`, 4 digits of hex, ok it\'s 2 bytes.\\n\\nIf you want to check Unicode table, you refer to https://unicode.org/charts/\\n\\nBut let\'s think about it, how many characters can we deal with in this way?\\n\\nYes, it\'s 2 bytes, which means 2^16 = 65535.\\n\\nIs that enough? _No._\\n\\nSo if you want to use _minor_ characters like \ud83d\udc4b, you have to use `Surrogates`,\\n\\nroughly meaning you have to treat `2 characters as 1 character`.\\n\\nOK, then what is the Unicode code point of \ud83d\udc4b? Let\'s check at https://emojipedia.org/emoji/%F0%9F%91%8B/ (emojipedia comes in hady)\\n\\nSo \ud83d\udc4b\'s code point is `U+1F44B`. (Is that `codepoints` btw? Help from English speakers wanted...)\\n\\nAs you\'ve noticed, `U+1F44B` is 5 digits of hex and over 65535,\\n\\nwith that pointed out, in JavaScript (UTF-16):\\n\\n```js\\n> \\"\ud83d\udc4b\\".split(\\"\\")\\n\\n(2)\xa0[\'\\\\uD83D\', \'\\\\uDC4B\']\\n```\\n\\nVoila! (?)\\n\\n[Hight Surrogates \'U+D83D\'](https://www.compart.com/en/unicode/U+D83D) + [Low Surrogates \'U+DC48\'](https://www.compart.com/en/unicode/U+DC48)\\n\\nbecome 1 character with power, or cost, of 2 characters. What a story!\\n\\n### Zero Width Joiner\\n\\nNext, what about \ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68? Isn\'t it weird that its `.length` is 11??\\n\\nLet\'s unpack, or split it:\\n\\n```js\\n> \\"\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\\".split(\\"\\")\\n\\n(11)\xa0[\'\\\\uD83D\', \'\\\\uDC69\', \'\u200d\', \'\u2764\', \'\ufe0f\', \'\u200d\', \'\\\\uD83D\', \'\\\\uDC8B\', \'\u200d\', \'\\\\uD83D\', \'\\\\uDC68\']\\n```\\n\\nIt looks something like `emoji + empty char + heart + empty char + empty char + emoji + empty char + emoji`.\\n\\nYou want more organized information? Look here! https://emojipedia.org/emoji/%F0%9F%91%A9%E2%80%8D%E2%9D%A4%EF%B8%8F%E2%80%8D%F0%9F%92%8B%E2%80%8D%F0%9F%91%A8/\\n\\nIt says `Codepoints\\tU+1F469, U+200D, U+2764, U+FE0F, U+200D, U+1F48B, U+200D, U+1F468`.\\n\\nGiven `U+1F469` is equivalent to `U+D83D + U+DC69`, `U+200D` is the one of _empty char_.\\n\\n\\nWhat is this?\\n\\nLet\'s take a look at https://www.compart.com/en/unicode/U+200D this time.\\n\\nAh, your name is `Zero Width Joiner (ZWJ)`, nice to _SEE_ you finally.\\n\\nAnother _empty char_ is `U+FE0F Variation Selector-16 (VS16)`: https://www.compart.com/en/unicode/U+FE0F\\n\\nYou can read its detail [at Unicode org\'s website](http://www.unicode.org/Public/6.1.0/ucd/StandardizedVariants.html) but, in short,\\n\\nwith `U+2665 U+FE0E` you get black heart, while with `U+2665 U+FE0F` you get red heart.\\n\\nOK, that\'s it for today. Cool!\\n\\nI hope it was clear, and hopefully not wrong at least. (correction welcomed!\ud83d\ude4f)\\n\\n\\n## Things I want to talk about later\\n\\n### Japanese text encoding in Golang\\n- https://cs.opensource.google/go/x/text/+/master:encoding/japanese/maketables.go\\n- https://encoding.spec.whatwg.org/#shift_jis\\n- https://encoding.spec.whatwg.org/index-jis0208.txt\\n### MySQL\\n- Well known \\"Sushi-Beer\\" problem, is the `utf8mb4_bin` silver bullet?\\n\\nTo Be Continued..."},{"id":"reading-fundamentals-of-software-architecture","metadata":{"permalink":"/blog/reading-fundamentals-of-software-architecture","source":"@site/blog/2023-01-16.md","title":"Reading Fundamentals of Software Architecture","description":"Notes","date":"2023-01-16T00:00:00.000Z","formattedDate":"January 16, 2023","tags":[{"label":"software-architecture","permalink":"/blog/tags/software-architecture"},{"label":"reading-notes","permalink":"/blog/tags/reading-notes"}],"readingTime":0.4,"hasTruncateMarker":true,"authors":[{"name":"ymdarake","title":"Maintainer","url":"https://github.com/ymdarake","imageURL":"https://github.com/ymdarake.png","key":"ymdarake"}],"frontMatter":{"slug":"reading-fundamentals-of-software-architecture","title":"Reading Fundamentals of Software Architecture","authors":"ymdarake","tags":["software-architecture","reading-notes"]},"prevItem":{"title":"Demystifying Encoding and Length of String","permalink":"/blog/demystifying-encoding-and-length-of-string"},"nextItem":{"title":"Replacing website with Docusaurus","permalink":"/blog/replacing-website-with-docusaurus"}},"content":"## Notes\\nReading [Fundamentals of Software Architecture](https://www.oreilly.co.jp/books/9784873119823/) by Mark Richards, Neal Ford, 2020, O\'REILLY.\\n\\nI\'m writing down some keywords below...\\n\\n\x3c!-- truncate --\x3e\\n\\n* **Architecture Decision Records**\\n* Ambulance pattern\\n* Outbreak Cache\\n* Dividing Data Stores\\n    * Better access control by user types\\n    * Better availability\\n* Risk Storming\\n    * Make Matrix\\n        * Availability\\n        * Elasticity\\n        * Security\\n\\n\\n## Context\\n\\nI\'ve been in a project which is based on Microsevice Architecture and Event Driven Architecture. (with k8s and Kafka)"},{"id":"replacing-website-with-docusaurus","metadata":{"permalink":"/blog/replacing-website-with-docusaurus","source":"@site/blog/2023-01-10.md","title":"Replacing website with Docusaurus","description":"Hello from Docusaurus","date":"2023-01-10T00:00:00.000Z","formattedDate":"January 10, 2023","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.575,"hasTruncateMarker":true,"authors":[{"name":"ymdarake","title":"Maintainer","url":"https://github.com/ymdarake","imageURL":"https://github.com/ymdarake.png","key":"ymdarake"}],"frontMatter":{"slug":"replacing-website-with-docusaurus","title":"Replacing website with Docusaurus","authors":"ymdarake","tags":["hello","docusaurus"]},"prevItem":{"title":"Reading Fundamentals of Software Architecture","permalink":"/blog/reading-fundamentals-of-software-architecture"}},"content":"## Hello from Docusaurus\\nThis is the first blog post with [Docusaurus](https://docusaurus.io/). (ver `2.2.0`)\\n\\n\x3c!-- truncate --\x3e\\n\\nIt\'s quite easy to write document, posts and etc with Docusaurus, so I decided to use it also for my own website.\\n\\n_(If you\'re thinking of writing UMLs with PlantUML in Docusaurus, you should know Docusaurus, as of now, uses PlantUML\'s public API to render UML images.)_\\n\\nI like how intuitive it is to organize markdown (and other) files to build a website with it.\\n\\nPreviously I used [zola](https://www.getzola.org/), which is not so bad but a bit awkward to customize and build...\\n\\nBut now I\'m in a positive mood to post my reading notes or misc thoughts here."}]}')}}]);